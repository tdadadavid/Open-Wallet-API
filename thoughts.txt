// Sign in process
*User gives [X]
    - password
    - email
    - names

* Hash the password
* Save the user to the database
* Generate token for the user
* Send the user access token


// Login process [X]
* User gives
    - email
    - password.

* Authenticate the user by
    - checking if the email exist.
    - compare given password with hash password
    - get the user id

* Generate token for the user
* token should contain
    - id

* Save the user's refresh token to the db
* Send the user's access token with the json response



* Wallet schema
    -id (string)(hl) , (varchar(16))(ll)
    -currency (string)(hl), (varchar(4))(ll)
    -amount (number)(hl), (Decimal, Defaults to 0.0000, precision 4 decimal places, both on db and javascript level)
    -user_id (number)(hl), (foreign key referencing users table)

* Maximum amount to store 100,000,000 (hundred million);
* Accurately it is 100,000,000.0000

* Verify the user token
* Verify the currency given

* Save the wallet to the db, using the user_id [X]

//TODO
--> get a wallet [X]
--> delete a wallet [X]

//TODO
--> make deposits
--> retrieve all deposits
--> get deposits details


* Deposit Schema
    - amount number.

* How do I structure the transactions table?

    --> Structure
        - id,
        - type,
        - amount,
        - source_wallet_id
        - created_at

    --> Types.
        - Deposits (one account involved).
        - Withdrawals (one account involved).
        - Transfers (two accounts involved).

* But what about transfers that involves two wallets?

* Creating triggers each type of transaction
* These triggers should be 'after' based triggers.
    -> The deposits-trigger should update the current wallet balance.
    -> The withdrawal-trigger should update the current wallet balance.
    -> The transfer-trigger should the balance of two wallets balance.
            -> source_wallet.
            -> destination_wallet.
       nd should also store the details in a transfer_details table. [no need for this any longer]

* Stored procedures for performing the particular 'type'
* operation on the wallet.

* Maybe there can a scheduler for grouping the user transactions
* After a particular duration time.


* Transaction history format
    - type.
    - amount.
    - when transaction happened.
    - wallet used (in the case where a user has multiple wallets).

***Their similarities***
    - the amount of the transaction (amount to be {transferred, withdrawn, deposited})
    - the wallet the money goes into or comes from (destination_wallet / source_wallet)
    - time the transaction was made (created_at)


* Transaction
    ---> id
    ---> type
    ---> created_at
    ---> amount
    // check out stored procedures.
    // check out triggers. (this is the rescue strategy)

* Deposits
    -> id -> varchar(18) not null,
    -> source_wallet_id -> varchar(16) not null foreign key, * the user has id,
    -> amount -> decimal (13,4) not null,
    -> created_at -> timestamp, current-timestamp.

* Withdrawals
    -> id -> varchar(18)
    -> source_wallet -> varchar(16) not null foreign key,
    -> amount_withdrawn -> decimal (13, 4) not null,
    -> created_at -> timestamp, current-stamp

* Considerations
    -> check the amount left in the user's wallet [✅]
    -> is there going to be tax for each withdrawal [❌]
    -> least amount to be withdrawn is 100.
    -> The Highest amount that can be withdrawn at once 1,000,000

* Transfers
    -> id -> varchar(18),
    -> amount -> decimal (13, 4) not null,
    -> source_wallet -> varchar(16) not null foreign key,
    -> destination_wallet -> varchar(16) not null foreign key,
    -> created_at -> timestamp, current-stamp

* Considerations
    -> check the currencies of each wallet and get their conversion
    -> The least amount to withdraw is 100,
    -> The highest amount that can be transferred at once 10,000,000
    -> the source_wallet must have a balance >= amount_been_transferred.
    -> check if the two wallets involved are of the same currency
            --> true, continue
            --> false, get the conversion between the two currencies
    ->

    -> if the currencies are the same
    -> eg NGN -->> NGN (100NGN -->> NGN)
    -> just deduct and add the amount to each wallet.

    -> if the currencies are different
    -> eg USD -->> NGN (100USD -->> NGN)
    -> then deduct 100 from the USD account
    -> add (converted_amount) to the NGN account.


* Retrieving all wallets.
    -->> use the source_wallet




* Transactions
    -> should I create a table, whereby for every transaction(deposit, withdrawal, transfer)
    -> a trigger will store the
        -> transaction type:
        -> transaction amount:
        -> transaction date:
        -> wallet address:

    -> or should I use inner join to scrape all transactions for a particular wallet
    -> from (deposit, withdrawal, transfer)

    // I will be given the wallet ID
    // SELECT * FROM